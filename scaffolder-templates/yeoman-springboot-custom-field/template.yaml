apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: springboot-template
  title: Spring Boot gRPC Service
  description: Create a simple microservice using gRPC and Spring Boot Java
  tags:
    - recommended
    - java
    - grpc
spec:
  owner: service@example.com
  type: service

  parameters:
    - title: Provide some simple information
      required:
        - component_id
        - repoTeam
        - java_package_name
      properties:
        component_id:
          title: Name
          type: string
          description: Unique name of the component
          ui:field: EntityNamePicker
        java_package_name:
          title: Java Package Name
          type: string
          description: Name for the java package. eg (io.backstage.blah)
          ui:backstage:
            review:
              mask: 'lorem mask updated!'
        description:
          title: Description
          type: string
          description: Help others understand what this website is for.
          ui:backstage:
            review:
              show: false
        repoTeam:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: ViaOpsSelectSquad
          ui:backstage:
            review:
              show: false
        hiddenTest:
          title: test
          type: string
          ui:widget: hidden
        hiddenTestPlusUserToken:
          title: test
          type: string
          ui:field: ViaOpsUserToken
          ui:widget: hidden
        userToken:
          title: UserToken
          type: string
          ui:field: ViaOpsUserToken
          ui:widget: password

    - title: Choose a location
      required:
        - repositoryName
      properties:
        repositoryName:
          title: Repository Name
          type: string
        coolFeatureName:
          title: Enable Cool Feature?
          type: boolean

  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        copyWithoutRender:
          - .github/workflows/*
        values:
          component_id: ${{ parameters.component_id }}
          description: ${{ parameters.description }}
          artifact_id: ${{ parameters.component_id }}
          java_package_name: ${{ parameters.java_package_name }}
          owner: ${{ parameters.owner }}
          destination: ${{ parameters.repoName }}
          http_port: 8080

    - id: yeoman
      name: Yeoman
      action: run:yeoman
      input:
        namespace: viaops:app
        args:
          - --force
        options:
          viaopsOptions:
            foo: bar
            lorem: ipsum
            projectName: ${{ parameters.repoName }}
            coolFeatureName: ${{ parameters.coolFeatureName }}

    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.component_id }}
        repoUrl: github.com?repo=${{ parameters.repositoryName }}&owner=viavarejo-internal

    - id: publish-viaops
      name: Publish ViaOps
      action: publish:viaops
      input:
        userToken: ${{ parameters.userToken }}
        repoTeam: ${{ parameters.repoTeam }}
        repositoryName: ${{ parameters.repositoryName }}

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
